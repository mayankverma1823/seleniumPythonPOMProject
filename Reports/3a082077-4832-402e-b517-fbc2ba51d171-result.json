{"name": "test_carTitleAndPrice[chrome-hyundai-Hyundai Cars]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0060F243]\n\t(No symbol) [0x00597FD1]\n\t(No symbol) [0x0048D04D]\n\t(No symbol) [0x0048FD34]\n\t(No symbol) [0x0048FBE5]\n\t(No symbol) [0x0048FE80]\n\t(No symbol) [0x004BDDBD]\n\t(No symbol) [0x004BCDEF]\n\t(No symbol) [0x004B32A6]\n\t(No symbol) [0x004D858C]\n\t(No symbol) [0x004B2BFF]\n\t(No symbol) [0x004D8804]\n\t(No symbol) [0x004EC9EB]\n\t(No symbol) [0x004D8386]\n\t(No symbol) [0x004B163C]\n\t(No symbol) [0x004B269D]\n\tGetHandleVerifier [0x008A9A22+2655074]\n\tGetHandleVerifier [0x0089CA24+2601828]\n\tGetHandleVerifier [0x006B8C0A+619850]\n\tGetHandleVerifier [0x006B7830+614768]\n\t(No symbol) [0x005A05FC]\n\t(No symbol) [0x005A5968]\n\t(No symbol) [0x005A5A55]\n\t(No symbol) [0x005B051B]\n\tBaseThreadInitThunk [0x75DC6939+25]\n\tRtlGetFullPathName_UEx [0x77228FD2+1218]\n\tRtlGetFullPathName_UEx [0x77228F9D+1165]", "trace": "self = <Testcases.test_CarTitleAndPrice.Test_CarTitleAndPrice object at 0x000002654BA89AF0>\nCarBrands = 'hyundai', CarTitle = 'Hyundai Cars'\n\n    @pytest.mark.parametrize(\"CarBrands,CarTitle\",\n                             dataProvider.get_data(\"CarBrand\"))  # called that data with function name\n    def test_carTitleAndPrice(self, CarBrands, CarTitle):\n        log.logger.info(\"Car Title And Price\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        if CarBrands == \"hyundai\":\n>           home.goToNewCars().hyundai()\n\ntest_CarTitleAndPrice.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\FindNewCarPage.py:10: in hyundai\n    self.click(\"Hyundai_Xpath\")\n..\\Pages\\BasePage.py:16: in click\n    self.driver.find_element(By.XPATH,configreader.readConfig(\"Reg Locators\",locator)).click()\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002654BAD4820>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...unk [0x75DC6939+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77228FD2+1218]\\\\n\\\\tRtlGetFullPathName_UEx [0x77228F9D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0060F243]\nE       \t(No symbol) [0x00597FD1]\nE       \t(No symbol) [0x0048D04D]\nE       \t(No symbol) [0x0048FD34]\nE       \t(No symbol) [0x0048FBE5]\nE       \t(No symbol) [0x0048FE80]\nE       \t(No symbol) [0x004BDDBD]\nE       \t(No symbol) [0x004BCDEF]\nE       \t(No symbol) [0x004B32A6]\nE       \t(No symbol) [0x004D858C]\nE       \t(No symbol) [0x004B2BFF]\nE       \t(No symbol) [0x004D8804]\nE       \t(No symbol) [0x004EC9EB]\nE       \t(No symbol) [0x004D8386]\nE       \t(No symbol) [0x004B163C]\nE       \t(No symbol) [0x004B269D]\nE       \tGetHandleVerifier [0x008A9A22+2655074]\nE       \tGetHandleVerifier [0x0089CA24+2601828]\nE       \tGetHandleVerifier [0x006B8C0A+619850]\nE       \tGetHandleVerifier [0x006B7830+614768]\nE       \t(No symbol) [0x005A05FC]\nE       \t(No symbol) [0x005A5968]\nE       \t(No symbol) [0x005A5A55]\nE       \t(No symbol) [0x005B051B]\nE       \tBaseThreadInitThunk [0x75DC6939+25]\nE       \tRtlGetFullPathName_UEx [0x77228FD2+1218]\nE       \tRtlGetFullPathName_UEx [0x77228F9D+1165]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "1f955108-3e76-437e-94a4-7467cd0aa5a2-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}, {"name": "CarBrands", "value": "'hyundai'"}, {"name": "CarTitle", "value": "'Hyundai Cars'"}], "start": 1671561189743, "stop": 1671561194568, "uuid": "52d92475-1faa-47e6-ab2b-69b977edf5d2", "historyId": "6caa4d8528875f85ff2108a7388c96ed", "testCaseId": "d41c4429c6241cad925ca76113f4a8cb", "fullName": "test_CarTitleAndPrice.Test_CarTitleAndPrice#test_carTitleAndPrice", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('get_browser')"}, {"name": "suite", "value": "test_CarTitleAndPrice"}, {"name": "subSuite", "value": "Test_CarTitleAndPrice"}, {"name": "host", "value": "DESKTOP-1MSC5F6"}, {"name": "thread", "value": "9656-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_CarTitleAndPrice"}]}